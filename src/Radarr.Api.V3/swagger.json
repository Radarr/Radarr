{
  "openapi": "3.0.0",
  "info": {
    "title": "Radarr",
    "version": "3.0.0",
    "description": "The way users should interact with Radarr programatically. To utilize any of these endpoints you will need a few pieces of information:\n\nex: localhost:7878/api/v3/movies?apiKey={key_here}\n\n* url: localhost, 10.1.0.1, 192.168.1.1, etc\n* port: 7878 (unless you modify it)\n* apiKey: Located in Settings > General > Security"
  },
  "servers": [
    {
      "url": "{protocol}://{hostPath}/api/v3",
      "variables": {
        "protocol": {
          "enum": [
            "https",
            "http"
          ],
          "default": "https"
        },
        "hostPath": {
          "default": "localhost:7878",
          "description": "Your Radarr Server URL"
        }
      }
    }
  ],
  "paths": {
    "/movie": {
      "get": {
        "tags": [
          "Movie"
        ],
        "summary": "Get all movies",
        "description": "Returns all movies stored in the database",
        "operationId": "getMovie",
        "parameters": [
          {
            "in": "query",
            "name": "tmdbId",
            "schema": {
              "type": "integer"
            },
            "required": false,
            "description": "TMDb id of the movie to get"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Movie"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "401": {
            "description": "Invalid API Key"
          },
          "404": {
            "description": "Movie not found"
          }
        },
        "security": [
          {
            "api key": []
          }
        ]
      },
      "post": {
        "tags": [
          "Movie"
        ],
        "summary": "Add new movie",
        "requestBody": {
          "description": "Movie object that needs to be added",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Movie"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "integer"
                }
              }
            }
          },
          "401": {
            "description": "Invalid API Key"
          },
          "405": {
            "description": "Validation exception"
          }
        },
        "security": [
          {
            "X-API-Key": []
          }
        ],
        "description": "Adds a movie to the database"
      },
      "put": {
        "tags": [
          "Movie"
        ],
        "summary": "Edit existing movie",
        "requestBody": {
          "description": "Movie object that needs to be edited",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Movie"
              }
            }
          }
        },
        "parameters": [
          {
            "in": "query",
            "name": "movieFiles",
            "schema": {
              "type": "boolean"
            },
            "required": false,
            "description": "Have radarr move files when updating"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Movie"
                }
              }
            }
          },
          "404": {
            "description": "Movie not found"
          },
          "405": {
            "description": "Validation exception"
          }
        },
        "security": [
          {
            "X-API-Key": []
          }
        ],
        "description": "Updates a movie in the database"
      }
    },
    "/movie/{id}": {
      "get": {
        "tags": [
          "Movie"
        ],
        "summary": "Get movie by database id",
        "description": "Returns a single movie",
        "operationId": "getMovieById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Database Id of movie to return",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Movie"
                }
              }
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "401": {
            "description": "Invalid API Key"
          },
          "404": {
            "description": "Movie not found"
          }
        },
        "security": [
          {
            "api key": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Movie"
        ],
        "summary": "Delete movie",
        "description": "",
        "operationId": "deleteMovie",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Database Id of movie to delete",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "addImportExclusion",
            "in": "query",
            "description": "Add deleted movies to List Exclusions",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "deleteFiles",
            "in": "query",
            "description": "Delete movie files when deleting movies",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "401": {
            "description": "Invalid API Key"
          },
          "404": {
            "description": "Movie not found"
          }
        },
        "security": [
          {
            "X-API-Key": []
          }
        ]
      }
    },
    "/tag/detail/{id}": {
      "get": {
        "tags": [
          "Tag"
        ],
        "summary": "Return usage details for a given tag id",
        "description": "Returns the id of all items in the database which use the specified tag",
        "operationId": "",
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TagDetail"
                }
              }
            }
          },
          "401": {
            "description": "Invalid API Key"
          }
        },
        "security": [
          {
            "api key": []
          }
        ]
      },
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "description": "Database id of tag",
          "required": true,
          "schema": {
            "type": "integer"
          }
        }
      ]
    },
    "/tag/detail": {
      "get": {
        "tags": [
          "Tag"
        ],
        "summary": "Return usage details for all tags in database",
        "description": "Returns a list of tag detail objects for all tags in the database.",
        "operationId": "",
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TagDetail"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Invalid API Key"
          }
        },
        "security": [
          {
            "api key": []
          }
        ]
      },
      "parameters": []
    },
    "/tag/{id}": {
      "get": {
        "tags": [
          "Tag"
        ],
        "summary": "Get tag by database id",
        "description": "Return a given tag and its label by the database id.",
        "operationId": "",
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Tag"
                }
              }
            }
          },
          "401": {
            "description": "Invalid API Key"
          }
        },
        "security": [
          {
            "api key": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Tag"
        ],
        "summary": "Delete tag by database id",
        "description": "Delete a tag",
        "operationId": "",
        "responses": {
          "200": {
            "description": "Successful request"
          },
          "401": {
            "description": "Invalid API Key"
          }
        },
        "security": [
          {
            "X-API-Key": []
          }
        ]
      },
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "description": "ID of tag",
          "required": true,
          "schema": {
            "type": "integer"
          }
        }
      ]
    },
    "/tag": {
      "get": {
        "tags": [
          "Tag"
        ],
        "summary": "Get all tags",
        "description": "Get all tags in the database",
        "operationId": "",
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Tag"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Invalid API Key"
          }
        },
        "security": [
          {
            "api key": []
          }
        ]
      },
      "put": {
        "tags": [
          "Tag"
        ],
        "summary": "Update tag",
        "description": "Update a tags label.",
        "operationId": "",
        "requestBody": {
          "description": "Tag object that needs to be updated",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Tag"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request"
          },
          "401": {
            "description": "Invalid API Key"
          }
        },
        "security": [
          {
            "X-API-Key": []
          }
        ]
      },
      "post": {
        "tags": [
          "Tag"
        ],
        "summary": "Create a new tag",
        "description": "Create a new tag that can be assigned to a movie, list, delay profile, notification, or restriction",
        "operationId": "",
        "requestBody": {
          "description": "Tag object that needs to be added",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Tag"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request"
          },
          "401": {
            "description": "Invalid API Key"
          }
        },
        "security": [
          {
            "X-API-Key": []
          }
        ]
      },
      "parameters": []
    },
    "/diskspace": {
      "get": {
        "summary": "Get diskspace information",
        "tags": [],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "path": {
                      "type": "string"
                    },
                    "label": {
                      "type": "string"
                    },
                    "freeSpace": {
                      "type": "number",
                      "description": "bytes"
                    },
                    "totalSpace": {
                      "type": "number",
                      "description": "bytes"
                    }
                  }
                },
                "examples": {
                  "Response": {
                    "value": [
                      {
                        "path": "D:\\",
                        "label": "DrivePool",
                        "freeSpace": 16187217043456,
                        "totalSpace": 56009755148288
                      },
                      {
                        "path": "C:\\",
                        "label": "Windows",
                        "freeSpace": 78659211264,
                        "totalSpace": 239409819648
                      }
                    ]
                  }
                }
              }
            }
          },
          "401": {
            "description": "Invalid API Key"
          }
        },
        "operationId": "get-diskspace",
        "description": "Query Radarr for disk usage information\n\nLocation: System > Status",
        "security": [
          {
            "api key": []
          }
        ]
      }
    },
    "/status": {
      "get": {
        "summary": "Get internal information",
        "tags": [],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "version": {
                      "type": "string"
                    },
                    "buildTime": {
                      "type": "string"
                    },
                    "isDebug": {
                      "type": "boolean"
                    },
                    "isProduction": {
                      "type": "boolean"
                    },
                    "isAdmin": {
                      "type": "boolean"
                    },
                    "isUserInteractive": {
                      "type": "boolean"
                    },
                    "startupPath": {
                      "type": "string"
                    },
                    "appData": {
                      "type": "string"
                    },
                    "osName": {
                      "type": "string"
                    },
                    "osVersion": {
                      "type": "string"
                    },
                    "isNetCore": {
                      "type": "boolean"
                    },
                    "isMono": {
                      "type": "boolean"
                    },
                    "isLinux": {
                      "type": "boolean"
                    },
                    "isOsx": {
                      "type": "boolean"
                    },
                    "isWindows": {
                      "type": "boolean"
                    },
                    "isDocker": {
                      "type": "boolean"
                    },
                    "mode": {
                      "type": "string"
                    },
                    "branch": {
                      "type": "string"
                    },
                    "authentication": {
                      "type": "string"
                    },
                    "sqliteVersion": {
                      "type": "string"
                    },
                    "migrationVersion": {
                      "type": "integer"
                    },
                    "urlBase": {
                      "type": "string"
                    },
                    "runtimeVersion": {
                      "type": "string"
                    },
                    "runtimeName": {
                      "type": "string"
                    },
                    "startTime": {
                      "type": "string"
                    },
                    "packageUpdateMechanism": {
                      "type": "string"
                    }
                  }
                },
                "examples": {
                  "Response": {
                    "value": {
                      "version": "10.0.0.34882",
                      "buildTime": "2020-09-01T23:23:23.9621974Z",
                      "isDebug": true,
                      "isProduction": false,
                      "isAdmin": false,
                      "isUserInteractive": true,
                      "startupPath": "C:\\ProgramData\\Radarr",
                      "appData": "C:\\ProgramData\\Radarr",
                      "osName": "Windows",
                      "osVersion": "10.0.18363.0",
                      "isNetCore": true,
                      "isMono": false,
                      "isLinux": false,
                      "isOsx": false,
                      "isWindows": true,
                      "isDocker": false,
                      "mode": "console",
                      "branch": "aphrodite",
                      "authentication": "none",
                      "sqliteVersion": "3.32.1",
                      "migrationVersion": 180,
                      "urlBase": "",
                      "runtimeVersion": "3.1.7",
                      "runtimeName": "netCore",
                      "startTime": "2020-09-01T23:50:20.2415965Z",
                      "packageUpdateMechanism": "builtIn"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Invalid API Key"
          }
        },
        "operationId": "get-status",
        "security": [
          {
            "api key": []
          }
        ],
        "description": "Find out information such as OS, version, paths used, etc",
        "parameters": []
      }
    },
    "/health": {
      "get": {
        "summary": "Get Radarr health information",
        "tags": [],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "source": {
                      "type": "string"
                    },
                    "type": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    },
                    "wikiUrl": {
                      "type": "string"
                    }
                  }
                },
                "examples": {
                  "Response": {
                    "value": [
                      {
                        "source": "ImportMechanismCheck",
                        "type": "warning",
                        "message": "Enable Completed Download Handling",
                        "wikiUrl": "https://github.com/Radarr/Radarr/wiki/Health-checks#enable-completed-download-handling"
                      },
                      {
                        "source": "DownloadClientCheck",
                        "type": "error",
                        "message": "Unable to communicate with qBittorrent. Failed to connect to qBittorrent, check your settings.",
                        "wikiUrl": "https://github.com/Radarr/Radarr/wiki/Health-checks#unable-to-communicate-with-download-client"
                      }
                    ]
                  }
                }
              }
            }
          },
          "401": {
            "description": "Invalid API Key"
          }
        },
        "operationId": "get-health",
        "security": [
          {
            "api key": []
          }
        ],
        "description": "Query radarr for health information\n\nLocation: System > Status"
      }
    },
    "/command": {
      "post": {
        "summary": "command",
        "operationId": "post-command",
        "responses": {
          "200": {
            "description": "Successful request"
          },
          "201": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "name": {
                      "type": "string"
                    }
                  }
                },
                "examples": {
                  "Example": {
                    "value": {
                      "name": "Backup"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Invalid API Key"
          }
        },
        "description": "Pushes commands to Radarr",
        "security": [
          {
            "X-API-Key": []
          }
        ],
        "parameters": [
          {
            "schema": {
              "type": "array"
            },
            "in": "query",
            "name": "name:Backup",
            "description": "Trigger a backup to be created"
          }
        ]
      }
    },
    "/update": {
      "get": {
        "summary": "List of recent updates",
        "tags": [],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "version": {
                      "type": "string"
                    },
                    "branch": {
                      "type": "string"
                    },
                    "releaseDate": {
                      "type": "string"
                    },
                    "fileName": {
                      "type": "string"
                    },
                    "url": {
                      "type": "string"
                    },
                    "installed": {
                      "type": "boolean"
                    },
                    "installable": {
                      "type": "boolean"
                    },
                    "latest": {
                      "type": "boolean"
                    },
                    "changes": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "new": {
                            "type": "object"
                          },
                          "fixed": {
                            "type": "object"
                          }
                        }
                      }
                    },
                    "hash": {
                      "type": "string"
                    }
                  }
                },
                "examples": {
                  "Example": {
                    "value": {
                      "version": "3.0.0.3553",
                      "branch": "aphrodite",
                      "releaseDate": "2020-09-02T05:36:13.047313Z",
                      "fileName": "Radarr.aphrodite.3.0.0.3553.windows-core-x64.zip",
                      "url": "https://dev.azure.com/Radarr/Radarr/_apis/build/builds/1896/artifacts?artifactName=Packages&fileId=A710686A9CB6848E73C3DDCA5F2B0D83C6189546E66DD3EF2D0D30B20735F6E802&fileName=Radarr.aphrodite.3.0.0.3553.windows-core-x64.zip&api-version=5.1",
                      "installed": false,
                      "installable": false,
                      "latest": false,
                      "changes": {
                        "new": [],
                        "fixed": [
                          "Importing completed downloads from NZBGet with post processing script failing",
                          "Importing of completed download when not a child of the download client output path",
                          "Getting parent of UNC paths"
                        ]
                      },
                      "hash": "a95c855cbc3ee253fd0b74181e866106daffc7b71b4a9e2d57cfbeede4333aee"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Invalid API Key"
          }
        },
        "operationId": "get-update",
        "description": "Will return a list of recent updates to Radarr\n\nLocation: System > Updates",
        "security": [
          {
            "api key": []
          }
        ]
      }
    },
    "/qualityProfile": {
      "get": {
        "summary": "Get quality profiles",
        "tags": [],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "name": {
                      "type": "string"
                    },
                    "upgradeAllowed": {
                      "type": "boolean"
                    },
                    "cutoff": {
                      "type": "integer"
                    },
                    "preferredTags": {
                      "type": "string"
                    },
                    "items": {
                      "type": "object",
                      "properties": {
                        "quality": {
                          "type": "object",
                          "properties": {
                            "id": {
                              "type": "integer"
                            },
                            "name": {
                              "type": "string"
                            },
                            "source": {
                              "type": "string"
                            },
                            "resolution": {
                              "type": "integer"
                            },
                            "modifier": {
                              "type": "string"
                            }
                          }
                        },
                        "items": {
                          "type": "object"
                        },
                        "allowed": {
                          "type": "boolean"
                        }
                      }
                    },
                    "id": {
                      "type": "integer"
                    },
                    "minFormatScore": {
                      "type": "integer"
                    },
                    "cutoffFormatScore": {
                      "type": "integer"
                    },
                    "formatItems": {
                      "type": "object",
                      "properties": {
                        "format": {
                          "type": "integer"
                        },
                        "name": {
                          "type": "string"
                        },
                        "score": {
                          "type": "integer"
                        }
                      }
                    },
                    "language": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "integer"
                          },
                          "name": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  }
                },
                "examples": {
                  "Example": {
                    "value": [
                      {
                        "name": "Any",
                        "upgradeAllowed": true,
                        "cutoff": 20,
                        "preferredTags": "freeleach",
                        "items": [
                          {
                            "quality": {
                              "id": 0,
                              "name": "Unknown",
                              "source": "unknown",
                              "resolution": 0,
                              "modifier": "none"
                            },
                            "items": [],
                            "allowed": true
                          }
                        ]
                      }
                    ]
                  }
                }
              }
            }
          },
          "401": {
            "description": "Invalid API Key"
          }
        },
        "operationId": "get-add-discover",
        "description": "Query Radarr for quality profiles ",
        "security": [
          {
            "api key": []
          }
        ]
      },
      "parameters": []
    },
    "/customFilter": {
      "get": {
        "summary": "Get custom filters",
        "tags": [],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "type": {
                      "type": "string"
                    },
                    "label": {
                      "type": "string"
                    },
                    "": {
                      "type": "object",
                      "properties": {
                        "key": {
                          "type": "string"
                        },
                        "value": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "time": {
                                "type": "string"
                              },
                              "value": {
                                "type": "integer"
                              }
                            }
                          }
                        },
                        "type": {
                          "type": "string"
                        }
                      }
                    },
                    "id": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Example": {
                    "value": [
                      {
                        "type": "movieIndex",
                        "label": "not in last",
                        "filters": [
                          {
                            "key": "inCinemas",
                            "value": {
                              "time": "months",
                              "value": 12
                            },
                            "type": "notInLast"
                          }
                        ],
                        "id": 2
                      }
                    ]
                  }
                }
              }
            }
          },
          "401": {
            "description": "Invalid API Key"
          }
        },
        "operationId": "get-customFilter",
        "description": "Query Radarr for custom filters",
        "security": [
          {
            "api key": []
          }
        ]
      }
    },
    "/importList": {
      "get": {
        "summary": "Get import list information",
        "tags": [],
        "responses": {
          "200": {
            "description": "Succesful response ",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "enabled": {
                      "type": "boolean"
                    },
                    "enableAuto": {
                      "type": "boolean"
                    },
                    "shouldMonitor": {
                      "type": "boolean"
                    },
                    "rootFolderPath": {
                      "type": "string"
                    },
                    "qualityProfile": {
                      "type": "integer"
                    },
                    "searchOnAdd": {
                      "type": "boolean"
                    },
                    "minimumAvailability": {
                      "type": "string"
                    },
                    "listType": {
                      "type": "string"
                    },
                    "listOrder": {
                      "type": "integer"
                    },
                    "name": {
                      "type": "string"
                    },
                    "fields": {
                      "type": "object",
                      "properties": {
                        "order": {
                          "type": "integer"
                        },
                        "name": {
                          "type": "string"
                        },
                        "label": {
                          "type": "string"
                        },
                        "helpText": {
                          "type": "string"
                        },
                        "value": {
                          "type": "string"
                        },
                        "type": {
                          "type": "string"
                        },
                        "advanced": {
                          "type": "boolean"
                        }
                      }
                    },
                    "implementationName": {
                      "type": "string"
                    },
                    "implementation": {
                      "type": "string"
                    },
                    "configContract": {
                      "type": "string"
                    },
                    "infoLink": {
                      "type": "string"
                    },
                    "tags": {
                      "type": "object"
                    },
                    "id": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Example": {
                    "value": [
                      {
                        "enabled": true,
                        "enableAuto": true,
                        "shouldMonitor": true,
                        "rootFolderPath": "D:\\Plex\\Movies\\",
                        "qualityProfileId": 4,
                        "searchOnAdd": false,
                        "minimumAvailability": "announced",
                        "listType": "other",
                        "listOrder": 3,
                        "name": "IMDb List",
                        "fields": [
                          {
                            "order": 0,
                            "name": "listId",
                            "label": "List/User ID",
                            "helpText": "IMDb list ID (e.g ls12345678), IMDb user ID (e.g. ur12345678), 'top250' or 'popular'",
                            "value": "ur109135197",
                            "type": "textbox",
                            "advanced": false
                          }
                        ],
                        "implementationName": "IMDb Lists",
                        "implementation": "IMDbListImport",
                        "configContract": "IMDbListSettings",
                        "infoLink": "https://github.com/Radarr/Radarr/wiki/Supported-ImportLists#imdblistimport",
                        "tags": [
                          2
                        ],
                        "id": 1
                      }
                    ]
                  }
                }
              }
            }
          },
          "401": {
            "description": "Invalid API Key"
          }
        },
        "operationId": "get-importList",
        "description": "Query Radarr for all lists",
        "security": [
          {
            "api key": []
          }
        ]
      }
    },
    "/ui": {
      "get": {
        "summary": "Get UI settings",
        "tags": [],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "firstDayOfWeek": {
                      "type": "integer"
                    },
                    "calendarWeekColumnHeader": {
                      "type": "string"
                    },
                    "movieRuntimeFormat": {
                      "type": "string"
                    },
                    "shortDateFormat": {
                      "type": "string"
                    },
                    "longDateFormat": {
                      "type": "string"
                    },
                    "timeFormat": {
                      "type": "string"
                    },
                    "showRelativeDates": {
                      "type": "boolean"
                    },
                    "enableColorImpairedMode": {
                      "type": "boolean"
                    },
                    "movieInfoLanguage": {
                      "type": "integer"
                    },
                    "id": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Example": {
                    "value": {
                      "firstDayOfWeek": 0,
                      "calendarWeekColumnHeader": "ddd M/D",
                      "movieRuntimeFormat": "hoursMinutes",
                      "shortDateFormat": "MMM D YYYY",
                      "longDateFormat": "dddd, MMMM D YYYY",
                      "timeFormat": "h(:mm)a",
                      "showRelativeDates": true,
                      "enableColorImpairedMode": false,
                      "movieInfoLanguage": 1,
                      "id": 1
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Invalid API Key"
          }
        },
        "operationId": "get-ui",
        "description": "Query Radarr for UI settings",
        "security": [
          {
            "api key": []
          }
        ]
      }
    }
  },
  "components": {
    "schemas": {
      "Movie": {
        "type": "object",
        "required": [
          "title"
        ],
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "title": {
            "type": "string",
            "example": "Dark Phoenix"
          },
          "sortTitle": {
            "type": "string",
            "example": "dark phoenix"
          },
          "sizeOnDisk": {
            "type": "number"
          },
          "overview": {
            "type": "string"
          },
          "inCinemas": {
            "type": "string"
          },
          "physicalRelease": {
            "type": "string"
          },
          "images": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Image"
            }
          },
          "website": {
            "type": "string",
            "example": "http://darkphoenix.com"
          },
          "year": {
            "type": "integer"
          },
          "hasFile": {
            "type": "boolean"
          },
          "youTubeTrailerId": {
            "type": "string"
          },
          "studio": {
            "type": "string"
          },
          "path": {
            "type": "string"
          },
          "qualityProfileId": {
            "type": "integer"
          },
          "monitored": {
            "type": "boolean"
          },
          "minimumAcailability": {
            "type": "string",
            "enum": [
              "announced",
              "inCinema",
              "released"
            ]
          },
          "isAvailable": {
            "type": "boolean"
          },
          "folderName": {
            "type": "string"
          },
          "runtime": {
            "type": "integer"
          },
          "cleanTitle": {
            "type": "string"
          },
          "imdbId": {
            "type": "string"
          },
          "tmdbId": {
            "type": "integer"
          },
          "titleSlug": {
            "type": "integer"
          },
          "certification": {
            "type": "string"
          },
          "genres": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "integer"
            }
          },
          "added": {
            "type": "string"
          },
          "ratings": {
            "$ref": "#/components/schemas/Rating"
          },
          "collection": {
            "$ref": "#/components/schemas/Collection"
          },
          "status": {
            "type": "string",
            "description": "movie status",
            "enum": [
              "deleted",
              "tba",
              "announced",
              "inCinema",
              "released"
            ]
          }
        },
        "xml": {
          "name": "Movie"
        }
      },
      "Image": {
        "type": "object",
        "properties": {
          "coverType": {
            "type": "string",
            "enum": [
              "poster",
              "fanart"
            ]
          },
          "url": {
            "type": "string"
          }
        },
        "xml": {
          "name": "Image"
        }
      },
      "Collection": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "tmdbId": {
            "type": "integer"
          },
          "images": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Image"
            }
          }
        },
        "xml": {
          "name": "Collection"
        }
      },
      "Rating": {
        "type": "object",
        "properties": {
          "votes": {
            "type": "integer"
          },
          "value": {
            "type": "integer"
          }
        },
        "xml": {
          "name": "Rating"
        }
      },
      "Tag": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "label": {
            "type": "string"
          }
        }
      },
      "TagDetail": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "label": {
            "type": "string"
          },
          "delayProfileIds": {
            "type": "array",
            "items": {
              "type": "integer"
            }
          },
          "notificationIds": {
            "type": "array",
            "items": {
              "type": "integer"
            }
          },
          "restrictionIds": {
            "type": "array",
            "items": {
              "type": "integer"
            }
          },
          "netImportIds": {
            "type": "array",
            "items": {
              "type": "integer"
            }
          },
          "movieIds": {
            "type": "array",
            "items": {
              "type": "integer"
            }
          }
        }
      }
    },
    "securitySchemes": {
      "api key": {
        "name": "apiKey",
        "type": "apiKey",
        "in": "query",
        "description": "Used when not providing key via header"
      },
      "X-API-Key": {
        "type": "http",
        "scheme": "basic",
        "description": "Used when not providing key via URL"
      }
    }
  }
}